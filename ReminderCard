import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Calendar, Cake, Stethoscope, Activity, Edit, Users } from "lucide-react";
import { format, isToday, isTomorrow, isPast } from "date-fns";

const typeIcons = {
  birthday: Cake,
  milestone: Activity,
  checkup: Stethoscope,
  activity: Activity,
  other: Calendar
};

const typeColors = {
  birthday: "bg-purple-100 text-purple-700 border-purple-200",
  milestone: "bg-green-100 text-green-700 border-green-200",
  checkup: "bg-blue-100 text-blue-700 border-blue-200",
  activity: "bg-orange-100 text-orange-700 border-orange-200",
  other: "bg-gray-100 text-gray-700 border-gray-200"
};

export default function ReminderCard({ reminder, children, onEdit, onToggleComplete }) {
  const IconComponent = typeIcons[reminder.type] || Calendar;
  const reminderDate = new Date(reminder.date);
  const child = children.find(c => c.id === reminder.child_id);

  const getDateBadge = () => {
    if (reminder.is_completed) {
      return <Badge className="bg-green-100 text-green-700 border-green-200">Completed</Badge>;
    }
    if (isToday(reminderDate)) {
      return <Badge className="bg-red-100 text-red-700 border-red-200">Today</Badge>;
    }
    if (isTomorrow(reminderDate)) {
      return <Badge className="bg-orange-100 text-orange-700 border-orange-200">Tomorrow</Badge>;
    }
    if (isPast(reminderDate)) {
      return <Badge className="bg-red-100 text-red-700 border-red-200">Overdue</Badge>;
    }
    return <Badge variant="outline">{format(reminderDate, 'MMM d')}</Badge>;
  };

  return (
    <Card className={`bg-white/90 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-300 group ${
      reminder.is_completed ? 'opacity-75' : ''
    }`}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <Checkbox
                checked={reminder.is_completed}
                onCheckedChange={() => onToggleComplete(reminder)}
                className="data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500"
              />
              <div className={`p-2 rounded-full ${typeColors[reminder.type]?.replace('text-', 'bg-').replace('border-', '').replace('-700', '-100')}`}>
                <IconComponent className={`w-5 h-5 ${typeColors[reminder.type]?.match(/text-\w+-\d+/)?.[0]}`} />
              </div>
            </div>
            <div className="flex-1">
              <CardTitle className={`text-lg ${reminder.is_completed ? 'line-through text-gray-500' : 'text-gray-900'}`}>
                {reminder.title}
              </CardTitle>
              <div className="flex items-center gap-2 mt-1">
                <Badge className={typeColors[reminder.type]}>
                  {reminder.type}
                </Badge>
                {getDateBadge()}
              </div>
            </div>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={() => onEdit(reminder)}
            className="opacity-0 group-hover:opacity-100 transition-opacity hover:bg-blue-50"
          >
            <Edit className="w-4 h-4 text-blue-600" />
          </Button>
        </div>
      </CardHeader>

      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Calendar className="w-4 h-4" />
            <span>{format(reminderDate, 'EEEE, MMMM d, yyyy')}</span>
          </div>

          {child && (
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <Users className="w-4 h-4" />
              <span>For {child.name}</span>
            </div>
          )}

          {reminder.description && (
            <p className={`text-sm leading-relaxed ${
              reminder.is_completed ? 'text-gray-500' : 'text-gray-700'
            }`}>
              {reminder.description}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
}