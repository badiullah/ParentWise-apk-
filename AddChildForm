import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { X, Plus, Baby, Save } from "lucide-react";

const commonTraits = [
  "Curious", "Energetic", "Shy", "Outgoing", "Creative", "Analytical", 
  "Empathetic", "Independent", "Playful", "Thoughtful", "Active", "Calm"
];

const commonInterests = [
  "Drawing", "Reading", "Sports", "Music", "Dancing", "Building", "Cooking", 
  "Animals", "Nature", "Video Games", "Board Games", "Science", "Art", "Theater"
];

export default function AddChildForm({ child, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    name: child?.name || "",
    birth_date: child?.birth_date || "",
    personality_traits: child?.personality_traits || [],
    interests: child?.interests || [],
    development_notes: child?.development_notes || "",
    favorite_activities: child?.favorite_activities || []
  });

  const [newTrait, setNewTrait] = useState("");
  const [newInterest, setNewInterest] = useState("");

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const addTrait = (trait) => {
    if (trait && !formData.personality_traits.includes(trait)) {
      setFormData(prev => ({
        ...prev,
        personality_traits: [...prev.personality_traits, trait]
      }));
    }
    setNewTrait("");
  };

  const removeTrait = (traitToRemove) => {
    setFormData(prev => ({
      ...prev,
      personality_traits: prev.personality_traits.filter(trait => trait !== traitToRemove)
    }));
  };

  const addInterest = (interest) => {
    if (interest && !formData.interests.includes(interest)) {
      setFormData(prev => ({
        ...prev,
        interests: [...prev.interests, interest]
      }));
    }
    setNewInterest("");
  };

  const removeInterest = (interestToRemove) => {
    setFormData(prev => ({
      ...prev,
      interests: prev.interests.filter(interest => interest !== interestToRemove)
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.name || !formData.birth_date) return;
    onSave(formData);
  };

  return (
    <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-xl">
      <CardHeader className="bg-gradient-to-r from-blue-50 to-green-50 border-b border-blue-100">
        <CardTitle className="flex items-center gap-3 text-xl">
          <Baby className="w-6 h-6 text-blue-600" />
          {child ? `Edit ${child.name}` : 'Add New Child'}
        </CardTitle>
      </CardHeader>

      <CardContent className="p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="name">Child's Name *</Label>
              <Input
                id="name"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="Enter child's name"
                required
                className="border-gray-200 focus:border-blue-300 focus:ring-blue-200"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="birth_date">Birth Date *</Label>
              <Input
                id="birth_date"
                type="date"
                value={formData.birth_date}
                onChange={(e) => handleInputChange('birth_date', e.target.value)}
                required
                className="border-gray-200 focus:border-blue-300 focus:ring-blue-200"
              />
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <Label>Personality Traits</Label>
              <div className="flex flex-wrap gap-2 mb-3">
                {formData.personality_traits.map((trait) => (
                  <Badge key={trait} className="bg-red-100 text-red-700 border-red-200 gap-1">
                    {trait}
                    <X 
                      className="w-3 h-3 cursor-pointer hover:text-red-900" 
                      onClick={() => removeTrait(trait)}
                    />
                  </Badge>
                ))}
              </div>
              <div className="flex gap-2 mb-2">
                <Input
                  placeholder="Add custom trait"
                  value={newTrait}
                  onChange={(e) => setNewTrait(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTrait(newTrait))}
                  className="flex-1 border-gray-200"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => addTrait(newTrait)}
                  disabled={!newTrait}
                >
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
              <div className="flex flex-wrap gap-1">
                {commonTraits.map((trait) => (
                  <Button
                    key={trait}
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => addTrait(trait)}
                    className="text-xs hover:bg-red-50 hover:text-red-700"
                    disabled={formData.personality_traits.includes(trait)}
                  >
                    + {trait}
                  </Button>
                ))}
              </div>
            </div>

            <div>
              <Label>Interests & Hobbies</Label>
              <div className="flex flex-wrap gap-2 mb-3">
                {formData.interests.map((interest) => (
                  <Badge key={interest} className="bg-orange-100 text-orange-700 border-orange-200 gap-1">
                    {interest}
                    <X 
                      className="w-3 h-3 cursor-pointer hover:text-orange-900" 
                      onClick={() => removeInterest(interest)}
                    />
                  </Badge>
                ))}
              </div>
              <div className="flex gap-2 mb-2">
                <Input
                  placeholder="Add custom interest"
                  value={newInterest}
                  onChange={(e) => setNewInterest(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addInterest(newInterest))}
                  className="flex-1 border-gray-200"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => addInterest(newInterest)}
                  disabled={!newInterest}
                >
                  <Plus className="w-4 h-4" />
                </Button>
              </div>
              <div className="flex flex-wrap gap-1">
                {commonInterests.map((interest) => (
                  <Button
                    key={interest}
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => addInterest(interest)}
                    className="text-xs hover:bg-orange-50 hover:text-orange-700"
                    disabled={formData.interests.includes(interest)}
                  >
                    + {interest}
                  </Button>
                ))}
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="development_notes">Development Notes</Label>
            <Textarea
              id="development_notes"
              placeholder="Any special notes about your child's development, milestones, or things to remember..."
              value={formData.development_notes}
              onChange={(e) => handleInputChange('development_notes', e.target.value)}
              className="h-24 border-gray-200 focus:border-blue-300 focus:ring-blue-200"
            />
          </div>

          <div className="flex gap-3 pt-4 border-t border-gray-100">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-gradient-to-r from-blue-500 to-green-600 hover:from-blue-600 hover:to-green-700"
              disabled={!formData.name || !formData.birth_date}
            >
              <Save className="w-4 h-4 mr-2" />
              {child ? 'Update Child' : 'Add Child'}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}