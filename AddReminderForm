import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar, Save } from "lucide-react";

export default function AddReminderForm({ reminder, children, onSave, onCancel }) {
  const [formData, setFormData] = useState({
    title: reminder?.title || "",
    description: reminder?.description || "",
    date: reminder?.date || "",
    type: reminder?.type || "other",
    child_id: reminder?.child_id || "",
    is_completed: reminder?.is_completed || false
  });

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.title || !formData.date || !formData.type) return;
    onSave(formData);
  };

  return (
    <Card className="bg-white/90 backdrop-blur-sm border-0 shadow-xl">
      <CardHeader className="bg-gradient-to-r from-purple-50 to-blue-50 border-b border-purple-100">
        <CardTitle className="flex items-center gap-3 text-xl">
          <Calendar className="w-6 h-6 text-purple-600" />
          {reminder ? 'Edit Reminder' : 'Add New Reminder'}
        </CardTitle>
      </CardHeader>

      <CardContent className="p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title">Reminder Title *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="Enter reminder title"
                required
                className="border-gray-200 focus:border-purple-300 focus:ring-purple-200"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="date">Date *</Label>
              <Input
                id="date"
                type="date"
                value={formData.date}
                onChange={(e) => handleInputChange('date', e.target.value)}
                required
                className="border-gray-200 focus:border-purple-300 focus:ring-purple-200"
              />
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="type">Type *</Label>
              <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>
                <SelectTrigger className="border-gray-200 focus:border-purple-300">
                  <SelectValue placeholder="Select reminder type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="birthday">Birthday</SelectItem>
                  <SelectItem value="milestone">Milestone</SelectItem>
                  <SelectItem value="checkup">Medical Checkup</SelectItem>
                  <SelectItem value="activity">Activity/Event</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="child_id">For Child (Optional)</Label>
              <Select value={formData.child_id} onValueChange={(value) => handleInputChange('child_id', value)}>
                <SelectTrigger className="border-gray-200 focus:border-purple-300">
                  <SelectValue placeholder="Select a child" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={null}>No specific child</SelectItem>
                  {children.map(child => (
                    <SelectItem key={child.id} value={child.id}>
                      {child.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Add details about this reminder..."
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              className="h-24 border-gray-200 focus:border-purple-300 focus:ring-purple-200"
            />
          </div>

          <div className="flex gap-3 pt-4 border-t border-gray-100">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-gradient-to-r from-purple-500 to-blue-600 hover:from-purple-600 hover:to-blue-700"
              disabled={!formData.title || !formData.date || !formData.type}
            >
              <Save className="w-4 h-4 mr-2" />
              {reminder ? 'Update Reminder' : 'Add Reminder'}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}